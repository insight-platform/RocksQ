from typing import Optional


class ResponseVariant:
    @property
    def data(self) -> Optional[list[bytes]]: ...

    @property
    def len(self) -> Optional[int]: ...

    @property
    def size(self) -> Optional[int]: ...


class Response:
    @property
    def is_ready(self) -> bool: ...

    def try_get(self) -> Optional[ResponseVariant]: ...

    def get(self) -> ResponseVariant: ...


class PersistentQueueWithCapacity:
    def __init__(self, path: str, max_elements: int = 1_000_000_000, max_inflight_ops: int = 1_000): ...

    def push(self, items: list[bytes], no_gil: bool = True) -> Response: ...

    @property
    def inflight_ops(self) -> int: ...

    def pop(self, max_elements = 1, no_gil: bool = True) -> Response: ...

    @property
    def disk_size(self) -> Response: ...

    @property
    def payload_size(self) -> Response: ...

    @property
    def len(self) -> Response: ...
